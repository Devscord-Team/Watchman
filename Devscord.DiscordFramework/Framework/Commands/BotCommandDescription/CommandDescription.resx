<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddResponseCommand" xml:space="preserve">
    <value>Add an response that may appear</value>
  </data>
  <data name="AddRoleCommand" xml:space="preserve">
    <value>Command allows you to add a role to the user</value>
  </data>
  <data name="AddWarnCommand" xml:space="preserve">
    <value>Give a warning to the user</value>
  </data>
  <data name="AvatarCommand" xml:space="preserve">
    <value>Displays the user's avatar</value>
  </data>
  <data name="CustomCommandsCommand" xml:space="preserve">
    <value>View all custom commands</value>
  </data>
  <data name="DontaskCommand" xml:space="preserve">
    <value>Links to an article with the subject "Don't ask, just ask"</value>
  </data>
  <data name="GoogleCommand" xml:space="preserve">
    <value>Search for the appropriate phrase in google and generate a link.</value>
  </data>
  <data name="HelpCommand" xml:space="preserve">
    <value>It displays all possible commands, or an example of using a specific command</value>
  </data>
  <data name="InitCommand" xml:space="preserve">
    <value>Server initialization (loading information about the server into the bot database). It starts automatically when the bot is started, but if you have just added it to the server - it is possible that it has not been initialized yet - then it is worth doing it manually.</value>
  </data>
  <data name="MarchewCommand" xml:space="preserve">
    <value>The answer to life</value>
  </data>
  <data name="MarudaCommand" xml:space="preserve">
    <value>Use this command if a person who is a demolisher of fun on your server</value>
  </data>
  <data name="MessagesCommand" xml:space="preserve">
    <value>shows some user's message histories</value>
  </data>
  <data name="MuteCommand" xml:space="preserve">
    <value>Mute the user on the server</value>
  </data>
  <data name="MutedUsersCommand" xml:space="preserve">
    <value>Show all muted users</value>
  </data>
  <data name="NoHelloCommand" xml:space="preserve">
    <value>Posts a link that explains why Don't just say hi in chat</value>
  </data>
  <data name="RemoveResponseCommand" xml:space="preserve">
    <value>Remove response</value>
  </data>
  <data name="RemoveRoleCommand" xml:space="preserve">
    <value>Command allows you to remove a role from a user</value>
  </data>
  <data name="ResponsesCommand" xml:space="preserve">
    <value>Display all possible respones</value>
  </data>
  <data name="RolesCommand" xml:space="preserve">
    <value>Lists all safe roles on the server.</value>
  </data>
  <data name="SafeUsersCommand" xml:space="preserve">
    <value>Display safe users</value>
  </data>
  <data name="SendCommand" xml:space="preserve">
    <value>It allows you to send messages via bot to another text channel</value>
  </data>
  <data name="SetRoleCommand" xml:space="preserve">
    <value>Adds roles to the safe role list.</value>
  </data>
  <data name="StatsCommand" xml:space="preserve">
    <value>Generates a statistics graph showing the accuracy over a given period of time.</value>
  </data>
  <data name="TrustCommand" xml:space="preserve">
    <value>Add role to trusted</value>
  </data>
  <data name="TrustedRolesCommand" xml:space="preserve">
    <value>View trusted roles</value>
  </data>
  <data name="UnmuteCommand" xml:space="preserve">
    <value>Unmute the user on the server</value>
  </data>
  <data name="UntrustCommand" xml:space="preserve">
    <value>Add role to untrusted</value>
  </data>
  <data name="UpdateResponseCommand" xml:space="preserve">
    <value>Update response</value>
  </data>
  <data name="WarnsCommand" xml:space="preserve">
    <value>Allows you to check how many warnings a given user has</value>
  </data>
</root>